mlb %>%
html_nodes("#_33221434836993322") %>%
html_text()
mlb %>%
html_nodes("#_33221434836993322") %>%
html_table()
us_open %>%
html_nodes("#regular-leaderboard") %>%
html_text()
us_open %>%
html_nodes("#regular-leaderboard") %>%
html_table()
us_open %>%
html_nodes("#regular-leaderboard") %>%
html_table(header = FALSE)
us_open %>%
html_nodes("#regular-leaderboard") %>%
html_table(header = TRUE)
us_open %>%
html_nodes("#regular-leaderboard") %>%
html_table(fill = TRUE)
us_open %>%
html_nodes("#regular-leaderboard") %>%
html_table(fill = FALSE)
us_open %>%
html_nodes("#regular-leaderboard") %>%
html_text(fill = TRUE)
us_open %>%
html_nodes("#regular-leaderboard") %>%
html_text()
us_open %>%
html_nodes("#playoff-leaderboard") %>%
html_text()
us_open %>%
html_nodes("#regular-leaderboard > table") %>%
html_text()
us_open %>%
html_nodes("#regular-leaderboard > table") %>%
html_table()
us_open %>%
html_nodes("#regular-leaderboard > table") %>%
html_table(fill=TRUE)
url <- html("http://espn.go.com/golf/leaderboard")
us_open <- url %>%
html_nodes("#regular-leaderboard > table") %>%
html_table(fill=TRUE)
head(us_open)
url %>%
html_nodes("#regular-leaderboard") %>%
html_table(fill=TRUE)
us_open <- url %>%
html_nodes("#regular-leaderboard") %>%
html_table(fill=TRUE)
us_open <- url %>%
html_nodes("#regular-leaderboard") %>%
us_open <- url %>%
html_nodes("#regular-leaderboard > table") %>%
html_table(fill=TRUE)
url <- html("http://espn.go.com/golf/leaderboard")
us_open <- url %>%
html_nodes("#regular-leaderboard > table") %>%
html_table(fill=TRUE)
head(us_open)
us_open <- url %>%
html_nodes("#hole-stats") %>%
html_table(fill=TRUE)
us_open <- url %>%
html_nodes("#hole-stats > div.mod-content > table") %>%
html_table(fill=TRUE)
us_open
head(us_open)
us_open <- url %>%
html_nodes("#regular-leaderboard > table") %>%
html_table(fill=TRUE)
us_open
library(devtools)
devtools::install_github('apache/spark@v1.4.0', subdir='R/pkg')
irisDF <- createDataFrame(sqlCt, iris)
library(SparkR)
install.packages("rJava")
library(magrittr)
sc <- sparkR.init(master="local")
library(rJava)
setwd("~/spark-1.4.0")
setwd("~/spark-1.4.0/R/lib")
sc <- sparkR.init(sparkHome = "~/spark-1.4.0/R/lib")
setwd("~/spark-1.4.0/R/lib")
getwd()
sc <- sparkR.init(sparkHome = "/Users/Malter/spark-1.4.0/R/lib")
sc <- sparkR.init(sparkHome = "~/spark-1.4.0")
setwd("~/spark-1.4.0")
sc <- sparkR.init(sparkHome = "~/spark-1.4.0")
sc <- sparkR.init(sparkHome = "~/spark-1.4.0/bin/spark-submit")
sc = sparkR.init (master="local")
library(SparkR, lib.loc="~/spark-1.4.0/spark-1.4.0/R/lib")
sc <- sparkR.init(sparkHome = "~/spark-1.4.0")
sc <- sparkR.init(sparkHome = "~/spark-1.4.0/bin/spark-submit")
getwd()
sc <- sparkR.init(sparkHome = "/Users/Malter/spark-1.4.0")
sc <- sparkR.init(master="local")
sc.stop()
sc <- sparkR.init(sparkHome = "~/spark-1.4.0/bin/spark-submit")
setwd("~/")
sc <- sparkR.init(sparkHome = "~/spark-1.4.0/bin/spark-submit")
sc <- sparkR.init(sparkHome = "~")
sc <- sparkR.init(sparkHome = "/Users/Malter/spark-1.4.0")
sc <- sparkR.init(master="local")
Sys.setenv(SPARK_HOME="~/spark-1.4.0/")
.libPaths(c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib"), .libPaths()))
sc <- sparkR.init(master="local")
Sys.setenv(SPARK_HOME="~/spark-1.4.0/")
Sys.setenv(SPARK_HOME="~/spark-1.4.0/")
.libPaths(c(file.path(Sys.getenv(“SPARK_HOME”), “R”, “lib”), .libPaths()))
Sys.setenv(SPARK_HOME="/Users/Malter/spark-1.4.0")
.libPaths(c(file.path(Sys.getenv(“SPARK_HOME”), “R”, “lib”), .libPaths()))
.libPaths(c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib"), .libPaths()))
library(SparkR)
sc <- sparkR.init(master="local")
library(SparkR, lib.loc="~/spark-1.4.0/R/lib")
sc <- sparkR.init(sparkHome = "~/spark-1.4.0")
Sys.setenv(SPARK_MEM="1g")
sc <- sparkR.init(master="local[*]")
library(SparkR)
Sys.setenv(SPARK_MEM="1g")
sc <- sparkR.init(master="local[*]") # creating a SparkContext
.libPaths(c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib"), .libPaths()))
sc <- sparkR.init(master="local")
shiny::runApp('Desktop/movielense')
library(shiny)
library(shinydashboard)
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
movies2 <- read.csv("~/Desktop/movielense/movies.csv", header = TRUE, stringsAsFactors=FALSE)
head(movies2)
library(dplyr)
head(movies2)
movies2 <- group_by(title, movieId, genres)
movies2 <- read.csv("~/Desktop/movielense/movies.csv", header = TRUE, stringsAsFactors=FALSE)
movies2 <- movies2[order(title, movieId, genres),]
movies2 <- read.csv("~/Desktop/movielense/movies.csv", header = TRUE, stringsAsFactors=FALSE)
movies2 <- movies2[order(title, movieId, genres),]
library(plyr)
movies2 <- movies2[order(title, movieId, genres),]
movies2 <- movies2[with(movies2, order(-title)), ]
movies2 <- movies2[with(movies2, order(title)), ]
head(movies2)
shiny::runApp('Desktop/movielense')
nrow(movies2)
shiny::runApp('Desktop/movielense')
head(movies2)
tables(genres)
tables(movies2$genres)
table(movies2$genres)
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
names(movies2)
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
table(movies2$genres)
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
table(movies2$genres)
subset(movies2, title = 'Toy Story (1995)')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
subset(movies2, genre = 'Drama')
head(subset(movies2, genre = 'Drama'))
shiny::runApp('Desktop/movielense')
shiny::runApp('GitHub/Spray Chart')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
names(movies2)
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
table(movies2$genres)
shiny::runApp('Desktop/movielense')
head(movies)
head(movies2)
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
head(movies2)
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
head(movies2)
shiny::runApp('Desktop/movielense')
movies2 <- read.csv("movies2.csv", header = TRUE, stringsAsFactors=FALSE)
ratings <- read.csv("~/Desktop/movielense/ratings.csv", header = TRUE)
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
subset(movies, title == "Ace Ventura: Pet Detective (1994)")
subset(movies2, title == "Ace Ventura: Pet Detective (1994)")
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
nrow(movies2)
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
as.character(movies2$title[1:8552])
head(movies2)
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
head(movies2)
subset(movies2, movieId == 367)
subset(movies2, X == 367)
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
movies2 <- movies2[with(movies2, order(title)), ]
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Shiny/Batting')
shiny::runApp('Shiny/Batting')
shiny::runApp('Desktop/movielense')
install.packages("data.table")
library(data.table)
library(shiny)
library(shinydashboard)
library(data.table)
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
shiny::runApp('Desktop/movielense')
install.packages('DT')
install.packages('DT')
movies2 <- read.csv("/srv/connect/apps/movies/movies2.csv", header = TRUE, stringsAsFactors=FALSE)
shiny::runApp('Shiny/Movielense')
library(RCurl)
movies2 <- getURL("https://github.com/danmalter/Movielense/blob/master/movies2.csv")
head(movies2)
movies2 <- read.csv(text = movies2)
library(RCurl)
movies2 <- getURL("https://github.com/danmalter/Movielense/blob/master/movies2.csv")
y <- getURL("https://github.com/danmalter/Movielense/blob/master/movies2.csv")
movies2 <- read.csv(text = y)
movies2 <- repmis::source_data("https://www.dropbox.com/s/a62rk1ez72u1c2n/movies2.csv?dl=0",
sep = ",",
header = TRUE)
library(Repmis)
library(repmis)
movies2 <- repmis::source_data("https://www.dropbox.com/s/a62rk1ez72u1c2n/movies2.csv?dl=0",
sep = ",",
header = TRUE)
movies2 <- repmis::source_data("https://www.dropbox.com/s/a62rk1ez72u1c2n/movies2.csv?dl=0",
header = TRUE)
movies2 <- repmis::source_data("https://www.dropbox.com/s/a62rk1ez72u1c2n/movies2.csv?dl=0",
sep = "\n",
header = TRUE)
movies2
movies2 <- repmis::source_data("https://www.dropbox.com/s/a62rk1ez72u1c2n/movies2.csv?dl=0",
sep = " ",
header = TRUE)
head(movies2)
movies2 <- repmis::source_data("https://www.dropbox.com/s/a62rk1ez72u1c2n/movies2.csv?dl=0",
sep = "",
header = TRUE)
movies2 <- repmis::source_data("https://www.dropbox.com/s/a62rk1ez72u1c2n/movies2.csv?dl=0",
sep = ",",
header = TRUE)
movies2 <- repmis::source_data("https://www.dropbox.com/s/otoh17tfww0cxx1/ratings.csv?dl=0",
sep = ",",
header = TRUE)
require(RCurl)
myCsv <- getURL("https://github.com/danmalter/Movielense/blob/master/movies2.csv")
temporaryFile <- tempfile()
con <- file(temporaryFile, open = "w")
cat(myCsv, file = con)
close(con)
head(myCsv)
head(movies2)
movies2 <- read.csv("movies2.csv", header = TRUE, stringsAsFactors=FALSE)
setwd("~/Shiny/Movielense")
movies2 <- read.csv("movies2.csv", header = TRUE, stringsAsFactors=FALSE)
head(movies2)
read.csv(temporaryFile)
head(temporaryFile)
shiny::runApp()
summarise(subset(movie.ratings, movieId=='345'),
Average_Rating = mean(rating, na.rm = TRUE))
summarise(subset(movie.ratings, movieId=='345'),
Average_Rating = mean(rating, na.rm = TRUE))
summarise(subset(movie.ratings, movieId==345),
Average_Rating = mean(rating, na.rm = TRUE))
movie.ratings <- merge(ratings, movies2)
summarise(subset(movie.ratings, movieId==345),
Average_Rating = mean(rating, na.rm = TRUE))
ratingDF_tmp <- dcast( ratingDF, userID ~ movieID, value.var = "rating" , index="userID")
ratingDF <- read.delim("~/Desktop/movielense/ml-100k/u.data", header=F)
colnames(ratingDF) <- c("userID","movieID","rating", "timestamp")
moviesDF <- read.delim("~/Desktop/movielense/ml-100k/u.item", sep="|", header=F, stringsAsFactors = FALSE)
colnames(moviesDF)[colnames(moviesDF)=="V1"] <- "movieID"
colnames(moviesDF)[colnames(moviesDF)=="V2"] <- "name"
return(list(ratingDF=ratingDF, movieDF=moviesDF))
ratingDF[,2] <- dataList$movieDF$name[as.numeric(ratingDF[,2])]
ratingDF <- ratingDF[!duplicated(ratingDF[,1:2]),]
ratingDF_tmp <- dcast( ratingDF, userID ~ movieID, value.var = "rating" , index="userID")
head(ratingDF_tmp)
ratingDF <- ratingDF_tmp[,2:ncol(ratingDF_tmp)]
ratingMat <- as(ratingDF, "matrix")  ## cast data frame as matrix
movieRatingMat <- as(ratingMat, "realRatingMatrix")   ## create the realRatingMatrix
dimnames(movieRatingMat)[[1]] <- row.names(ratingDF)
return (movieRatingMat)
head(movieRatingMat)
ratingmat <- dcast(ratings, userId~movieId, value.var = "rating", na.rm=FALSE)
head(ratingmat)
shiny::runApp()
shiny::runApp()
movies <- read.csv("movies2.csv", header = TRUE, stringsAsFactors=FALSE)
ratings <- read.csv("ratings.csv", header = TRUE)
head(ratings)
ratingmat <- dcast(ratings, userId~movieId, value.var = "rating", na.rm=FALSE)
head(ratingmat)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
ratingmat <- as(ratingmat, "realRatingMatrix")
ratingmat_norm <- normalize(ratingmat)
recommender_model <- Recommender(ratingmat_norm, method = "UBCF", param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[1], n=10) #Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
recom_result <- matrix(0,10)
for (i in c(1:10)){
recom_result[i] <- as.integer(recom_list[[1]][i])
}
recom_result<-as.data.frame(movies[recom_result,2])
colnames(recom_result)<-list("Top-10 Movies")
recom_result
evaluation_scheme <- evaluationScheme(ratingmat, method="cross-validation", k=5, given=3,
goodRating=5)
algorithms<-list(
"random items"=list(name="RANDOM",param=NULL),
"popular items"=list(name="POPULAR",param=NULL),
"user-based CF"=list(name="UBCF",param=list(method="Cosine",nn=30))
)
head(ratings)
movies2[,3]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/Shiny/Movielens")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ratings <- read.csv("ratings20M.csv", header = TRUE)
ratings <- read.csv("ratings10M.csv", header = TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ratings <- read.csv("ratings500k.csv", header = TRUE)
ratingmat <- dcast(ratings, userId~movieId, value.var = "rating", na.rm=FALSE)
ratingmat <- ratingmat[,-1]
colnames(userSelect) <- colnames(ratingmat)
ratingmat2 <- as(ratingmat, "realRatingMatrix")
shiny::runApp()
movies <- read.csv("movies5.csv", header = TRUE, stringsAsFactors=FALSE)
nrow(movies)
shiny::runApp()
shiny::runApp()
shiny::runApp()
movies2 <- read.csv("movies.csv", header = TRUE, stringsAsFactors=FALSE)
head(movies2)
shiny::runApp()
shiny::runApp()
movies <- read.csv("movies.csv", header = TRUE, stringsAsFactors=FALSE)
ratings <- read.csv("ratings100k.csv", header = TRUE)
library(reshape2)
ratingmat <- dcast(ratings, userId~movieId, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
library(recommenderlab)
ratingmat <- as(ratingmat, "realRatingMatrix")
ratingmat_norm <- normalize(ratingmat)
recommender_model <- Recommender(ratingmat_norm, method = "UBCF", param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[1], n=10) #Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
recom_result <- matrix(0,10)
for (i in c(1:10)){
recom_result[i] <- as.integer(recom_list[[1]][i])
}
recom_result<-as.data.frame(movies[recom_result,2])
colnames(recom_result)<-list("Top-10 Movies")
recom_result
ratings <- read.csv("ratings500k.csv", header = TRUE)
library(reshape2)
#Create ratings matrix. Rows = userId, Columns = movieId
ratingmat <- dcast(ratings, userId~movieId, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
##################
#Model Creation###
##################
library(recommenderlab)
#Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
recommender_model <- Recommender(ratingmat_norm, method = "UBCF", param=list(method="Cosine",nn=30))
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#Create Recommender Model. "UBCF" stands for User-Based Collaborative Filtering
recom_result <- matrix(0,10)
recom <- predict(recommender_model, ratingmat[1], n=10) #Obtain top 10 recommendations for 1st user in dataset
#Obtain Top-10 recommendations
for (i in c(1:10)){
recom_result[i] <- as.integer(recom_list[[1]][i])
}
recom_result<-as.data.frame(movies[recom_result,2])
colnames(recom_result)<-list("Top-10 Movies")
recom_result
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
